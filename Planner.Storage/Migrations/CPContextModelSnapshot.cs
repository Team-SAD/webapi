// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Planner.Storage;

namespace Planner.Storage.Migrations
{
    [DbContext(typeof(CPContext))]
    partial class CPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Planner.Domain.Models.AppUser", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            EntityId = 1L,
                            EventId = 0L,
                            Name = "Abdul-Rauf Yakubu"
                        },
                        new
                        {
                            EntityId = 2L,
                            EventId = 0L,
                            Name = "Daniel Henderson"
                        },
                        new
                        {
                            EntityId = 3L,
                            EventId = 0L,
                            Name = "Stanhope Nwosu"
                        },
                        new
                        {
                            EntityId = 4L,
                            EventId = 0L,
                            Name = "Fred Belotte"
                        },
                        new
                        {
                            EntityId = 5L,
                            EventId = 0L,
                            Name = "Azhya Knox"
                        });
                });

            modelBuilder.Entity("Planner.Domain.Models.Event", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AppUserEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LocationEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.HasIndex("AppUserEntityId");

                    b.HasIndex("LocationEntityId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EntityId = 1L,
                            Description = "First event",
                            EndDate = new DateTime(2021, 5, 28, 10, 44, 11, 523, DateTimeKind.Local).AddTicks(3230),
                            StartDate = new DateTime(2021, 5, 28, 9, 44, 11, 501, DateTimeKind.Local).AddTicks(5030),
                            Title = "Title 1"
                        },
                        new
                        {
                            EntityId = 2L,
                            Description = "Second event",
                            EndDate = new DateTime(2021, 5, 28, 11, 44, 11, 523, DateTimeKind.Local).AddTicks(7110),
                            StartDate = new DateTime(2021, 5, 28, 9, 44, 11, 523, DateTimeKind.Local).AddTicks(6610),
                            Title = "Title 2"
                        },
                        new
                        {
                            EntityId = 3L,
                            Description = "Third event",
                            EndDate = new DateTime(2021, 5, 28, 12, 44, 11, 523, DateTimeKind.Local).AddTicks(7260),
                            StartDate = new DateTime(2021, 5, 28, 9, 44, 11, 523, DateTimeKind.Local).AddTicks(7250),
                            Title = "Title 3"
                        });
                });

            modelBuilder.Entity("Planner.Domain.Models.Location", b =>
                {
                    b.Property<long>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zipcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            EntityId = 1L,
                            City = "City 1",
                            State = "State 1",
                            Street = "Street 1",
                            Zipcode = "45623"
                        },
                        new
                        {
                            EntityId = 2L,
                            City = "City 2",
                            State = "State 2",
                            Street = "Street 2",
                            Zipcode = "45643"
                        },
                        new
                        {
                            EntityId = 3L,
                            City = "City ",
                            State = "State 3",
                            Street = "Street 3",
                            Zipcode = "45643"
                        });
                });

            modelBuilder.Entity("Planner.Domain.Models.Event", b =>
                {
                    b.HasOne("Planner.Domain.Models.AppUser", "AppUser")
                        .WithMany("Events")
                        .HasForeignKey("AppUserEntityId");

                    b.HasOne("Planner.Domain.Models.Location", "Location")
                        .WithMany("Events")
                        .HasForeignKey("LocationEntityId");

                    b.Navigation("AppUser");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Planner.Domain.Models.AppUser", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Planner.Domain.Models.Location", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
